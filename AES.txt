AES


import java.util.Scanner;

// AES-128 implementation that shows how encryption works with 10 complete rounds
public class Main {

    private static final int[] S_BOX = {
            0x63, 0x7C, 0x77, 0x7B, 0xF2, 0x6B, 0x6F, 0xC5, 0x30, 0x01, 0x67, 0x2B, 0xFE, 0xD7, 0xAB, 0x76,
            0xCA, 0x82, 0xC9, 0x7D, 0xFA, 0x59, 0x47, 0xF0, 0xAD, 0xD4, 0xA2, 0xAF, 0x9C, 0xA4, 0x72, 0xC0,
            0xB7, 0xFD, 0x93, 0x26, 0x36, 0x3F, 0xF7, 0xCC, 0x34, 0xA5, 0xE5, 0xF1, 0x71, 0xD8, 0x31, 0x15,
            0x04, 0xC7, 0x23, 0xC3, 0x18, 0x96, 0x05, 0x9A, 0x07, 0x12, 0x80, 0xE2, 0xEB, 0x27, 0xB2, 0x75,
            0x09, 0x83, 0x2C, 0x1A, 0x1B, 0x6E, 0x5A, 0xA0, 0x52, 0x3B, 0xD6, 0xB3, 0x29, 0xE3, 0x2F, 0x84,
            0x53, 0xD1, 0x00, 0xED, 0x20, 0xFC, 0xB1, 0x5B, 0x6A, 0xCB, 0xBE, 0x39, 0x4A, 0x4C, 0x58, 0xCF,
            0xD0, 0xEF, 0xAA, 0xFB, 0x43, 0x4D, 0x33, 0x85, 0x45, 0xF9, 0x02, 0x7F, 0x50, 0x3C, 0x9F, 0xA8,
            0x51, 0xA3, 0x40, 0x8F, 0x92, 0x9D, 0x38, 0xF5, 0xBC, 0xB6, 0xDA, 0x21, 0x10, 0xFF, 0xF3, 0xD2,
            0xCD, 0x0C, 0x13, 0xEC, 0x5F, 0x97, 0x44, 0x17, 0xC4, 0xA7, 0x7E, 0x3D, 0x64, 0x5D, 0x19, 0x73,
            0x60, 0x81, 0x4F, 0xDC, 0x22, 0x2A, 0x90, 0x88, 0x46, 0xEE, 0xB8, 0x14, 0xDE, 0x5E, 0x0B, 0xDB,
            0xE0, 0x32, 0x3A, 0x0A, 0x49, 0x06, 0x24, 0x5C, 0xC2, 0xD3, 0xAC, 0x62, 0x91, 0x95, 0xE4, 0x79,
            0xE7, 0xC8, 0x37, 0x6D, 0x8D, 0xD5, 0x4E, 0xA9, 0x6C, 0x56, 0xF4, 0xEA, 0x65, 0x7A, 0xAE, 0x08,
            0xBA, 0x78, 0x25, 0x2E, 0x1C, 0xA6, 0xB4, 0xC6, 0xE8, 0xDD, 0x74, 0x1F, 0x4B, 0xBD, 0x8B, 0x8A,
            0x70, 0x3E, 0xB5, 0x66, 0x48, 0x03, 0xF6, 0x0E, 0x61, 0x35, 0x57, 0xB9, 0x86, 0xC1, 0x1D, 0x9E,
            0xE1, 0xF8, 0x98, 0x11, 0x69, 0xD9, 0x8E, 0x94, 0x9B, 0x1E, 0x87, 0xE9, 0xCE, 0x55, 0x28, 0xDF,
            0x8C, 0xA1, 0x89, 0x0D, 0xBF, 0xE6, 0x42, 0x68, 0x41, 0x99, 0x2D, 0x0F, 0xB0, 0x54, 0xBB, 0x16
    };

    // Inverse S-Box
    private static final int[] REVERSE_MAGIC_BOX = {
            0x52, 0x09, 0x6A, 0xD5, 0x30, 0x36, 0xA5, 0x38, 0xBF, 0x40, 0xA3, 0x9E, 0x81, 0xF3, 0xD7, 0xFB,
            0x7C, 0xE3, 0x39, 0x82, 0x9B, 0x2F, 0xFF, 0x87, 0x34, 0x8E, 0x43, 0x44, 0xC4, 0xDE, 0xE9, 0xCB,
            0x54, 0x7B, 0x94, 0x32, 0xA6, 0xC2, 0x23, 0x3D, 0xEE, 0x4C, 0x95, 0x0B, 0x42, 0xFA, 0xC3, 0x4E,
            0x08, 0x2E, 0xA1, 0x66, 0x28, 0xD9, 0x24, 0xB2, 0x76, 0x5B, 0xA2, 0x49, 0x6D, 0x8B, 0xD1, 0x25,
            0x72, 0xF8, 0xF6, 0x64, 0x86, 0x68, 0x98, 0x16, 0xD4, 0xA4, 0x5C, 0xCC, 0x5D, 0x65, 0xB6, 0x92,
            0x6C, 0x70, 0x48, 0x50, 0xFD, 0xED, 0xB9, 0xDA, 0x5E, 0x15, 0x46, 0x57, 0xA7, 0x8D, 0x9D, 0x84,
            0x90, 0xD8, 0xAB, 0x00, 0x8C, 0xBC, 0xD3, 0x0A, 0xF7, 0xE4, 0x58, 0x05, 0xB8, 0xB3, 0x45, 0x06,
            0xD0, 0x2C, 0x1E, 0x8F, 0xCA, 0x3F, 0x0F, 0x02, 0xC1, 0xAF, 0xBD, 0x03, 0x01, 0x13, 0x8A, 0x6B,
            0x3A, 0x91, 0x11, 0x41, 0x4F, 0x67, 0xDC, 0xEA, 0x97, 0xF2, 0xCF, 0xCE, 0xF0, 0xB4, 0xE6, 0x73,
            0x96, 0xAC, 0x74, 0x22, 0xE7, 0xAD, 0x35, 0x85, 0xE2, 0xF9, 0x37, 0xE8, 0x1C, 0x75, 0xDF, 0x6E,
            0x47, 0xF1, 0x1A, 0x71, 0x1D, 0x29, 0xC5, 0x89, 0x6F, 0xB7, 0x62, 0x0E, 0xAA, 0x18, 0xBE, 0x1B,
            0xFC, 0x56, 0x3E, 0x4B, 0xC6, 0xD2, 0x79, 0x20, 0x9A, 0xDB, 0xC0, 0xFE, 0x78, 0xCD, 0x5A, 0xF4,
            0x1F, 0xDD, 0xA8, 0x33, 0x88, 0x07, 0xC7, 0x31, 0xB1, 0x12, 0x10, 0x59, 0x27, 0x80, 0xEC, 0x5F,
            0x60, 0x51, 0x7F, 0xA9, 0x19, 0xB5, 0x4A, 0x0D, 0x2D, 0xE5, 0x7A, 0x9F, 0x93, 0xC9, 0x9C, 0xEF,
            0xA0, 0xE0, 0x3B, 0x4D, 0xAE, 0x2A, 0xF5, 0xB0, 0xC8, 0xEB, 0xBB, 0x3C, 0x83, 0x53, 0x99, 0x61,
            0x17, 0x2B, 0x04, 0x7E, 0xBA, 0x77, 0xD6, 0x26, 0xE1, 0x69, 0x14, 0x63, 0x55, 0x21, 0x0C, 0x7D
    };

    // Round constant for key expansion
    private static final int[] RCON = {
            0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x1B, 0x36
    };

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);

        System.out.print("Enter message (max 16 chars): ");
        String message = scanner.nextLine();

        System.out.print("Enter 16-character key: ");
        String key = scanner.nextLine();

        byte[] messageBytes = padTo16Bytes(message);
        byte[] keyBytes = padTo16Bytes(key);

        // Key expansion
        byte[][] roundKeys = expandKey(keyBytes);

        System.out.println("\nEncrypting...");
        byte[] encrypted = encryptBlock(messageBytes, roundKeys);
        System.out.print("Ciphertext (hex): ");
        printHex(encrypted);

        System.out.println("\nDecrypting...");
        byte[] decrypted = decryptBlock(encrypted, roundKeys);
        System.out.println("Decrypted: \"" + new String(decrypted).trim() + "\"");
    }

    /* ===== Core Methods ===== */

    // 1. Add Round Key → 2. SubBytes → 3. ShiftRows → 4. MixColumns (except last round)
    private static byte[] encryptBlock(byte[] input, byte[][] roundKeys) {
        byte[] state = input.clone();

        System.out.println("Initial State:");
        printHex(state);

        // Initial round (AddRoundKey only)
        addRoundKey(state, roundKeys[0]);
        System.out.println("\nAfter Initial AddRoundKey:");
        printHex(state);

        // 9 main rounds
        for (int round = 1; round <= 9; round++) {
            System.out.println("\nRound " + round + ":");

            substituteBytes(state);
            System.out.println("After SubBytes:");
            printHex(state);

            shiftRows(state);
            System.out.println("After ShiftRows:");
            printHex(state);

            mixColumns(state);
            System.out.println("After MixColumns:");
            printHex(state);

            addRoundKey(state, roundKeys[round]);
            System.out.println("After AddRoundKey:");
            printHex(state);
        }

        // Final round (without MixColumns)
        System.out.println("\nRound 10 (Final Round):");
        substituteBytes(state);
        System.out.println("After SubBytes:");
        printHex(state);

        shiftRows(state);
        System.out.println("After ShiftRows:");
        printHex(state);

        addRoundKey(state, roundKeys[10]);
        System.out.println("After AddRoundKey:");
        printHex(state);

        return state;
    }

    // Exact reverse of encryption
    private static byte[] decryptBlock(byte[] cipherText, byte[][] roundKeys) {
        byte[] state = cipherText.clone();

        System.out.println("\nDecryption Process:");
        System.out.println("Initial Ciphertext:");
        printHex(state);

        // Reverse final round
        addRoundKey(state, roundKeys[10]);
        System.out.println("\nAfter Initial AddRoundKey:");
        printHex(state);

        invShiftRows(state);
        System.out.println("After InvShiftRows:");
        printHex(state);

        invSubstituteBytes(state);
        System.out.println("After InvSubBytes:");
        printHex(state);

        // 9 main rounds in reverse
        for (int round = 9; round >= 1; round--) {
            System.out.println("\nRound " + (10 - round) + ":");

            addRoundKey(state, roundKeys[round]);
            System.out.println("After AddRoundKey:");
            printHex(state);

            invMixColumns(state);
            System.out.println("After InvMixColumns:");
            printHex(state);

            invShiftRows(state);
            System.out.println("After InvShiftRows:");
            printHex(state);

            invSubstituteBytes(state);
            System.out.println("After InvSubBytes:");
            printHex(state);
        }

        // Final round (initial round in encryption)
        System.out.println("\nRound 10:");
        addRoundKey(state, roundKeys[0]);
        System.out.println("After Final AddRoundKey:");
        printHex(state);

        return state;
    }

    /* ===== Key Expansion ===== */
    private static byte[][] expandKey(byte[] key) {
        byte[][] roundKeys = new byte[11][16];
        System.arraycopy(key, 0, roundKeys[0], 0, 16);

        for (int i = 1; i <= 10; i++) {
            byte[] prevRoundKey = roundKeys[i-1];
            byte[] newRoundKey = new byte[16];

            // First word is special
            byte[] temp = new byte[4];
            System.arraycopy(prevRoundKey, 12, temp, 0, 4);
            temp = rotWord(temp);
            temp = subWord(temp);
            temp[0] ^= (byte)RCON[i-1];

            for (int j = 0; j < 4; j++) {
                newRoundKey[j] = (byte)(prevRoundKey[j] ^ temp[j]);
            }

            // Other words
            for (int j = 4; j < 16; j++) {
                newRoundKey[j] = (byte)(newRoundKey[j-4] ^ prevRoundKey[j]);
            }

            System.arraycopy(newRoundKey, 0, roundKeys[i], 0, 16);
        }

        return roundKeys;
    }

    private static byte[] rotWord(byte[] word) {
        byte[] rotated = new byte[4];
        rotated[0] = word[1];
        rotated[1] = word[2];
        rotated[2] = word[3];
        rotated[3] = word[0];
        return rotated;
    }

    private static byte[] subWord(byte[] word) {
        byte[] substituted = new byte[4];
        for (int i = 0; i < 4; i++) {
            substituted[i] = (byte)S_BOX[word[i] & 0xFF];
        }
        return substituted;
    }

    /* ===== AES Operations ===== */
    private static void substituteBytes(byte[] state) {
        for (int i = 0; i < state.length; i++) {
            state[i] = (byte)(S_BOX[state[i] & 0xFF]);
        }
    }

    private static void invSubstituteBytes(byte[] state) {
        for (int i = 0; i < state.length; i++) {
            state[i] = (byte)(REVERSE_MAGIC_BOX[state[i] & 0xFF]);
        }
    }

    private static void shiftRows(byte[] state) {
        byte[] temp = new byte[16];
        // Row 0 - no shift
        temp[0] = state[0]; temp[1] = state[5]; temp[2] = state[10]; temp[3] = state[15];
        // Row 1 - shift 1
        temp[4] = state[4]; temp[5] = state[9]; temp[6] = state[14]; temp[7] = state[3];
        // Row 2 - shift 2
        temp[8] = state[8]; temp[9] = state[13]; temp[10] = state[2]; temp[11] = state[7];
        // Row 3 - shift 3
        temp[12] = state[12]; temp[13] = state[1]; temp[14] = state[6]; temp[15] = state[11];
        System.arraycopy(temp, 0, state, 0, 16);
    }

    private static void invShiftRows(byte[] state) {
        byte[] temp = new byte[16];
        // Row 0 - no shift
        temp[0] = state[0]; temp[1] = state[13]; temp[2] = state[10]; temp[3] = state[7];
        // Row 1 - shift 1
        temp[4] = state[4]; temp[5] = state[1]; temp[6] = state[14]; temp[7] = state[11];
        // Row 2 - shift 2
        temp[8] = state[8]; temp[9] = state[5]; temp[10] = state[2]; temp[11] = state[15];
        // Row 3 - shift 3
        temp[12] = state[12]; temp[13] = state[9]; temp[14] = state[6]; temp[15] = state[3];
        System.arraycopy(temp, 0, state, 0, 16);
    }

    private static void mixColumns(byte[] state) {
        for (int i = 0; i < 16; i += 4) {
            byte[] column = new byte[4];
            System.arraycopy(state, i, column, 0, 4);

            byte[] mixed = new byte[4];
            mixed[0] = (byte)(mul(0x02, column[0]) ^ mul(0x03, column[1]) ^ column[2] ^ column[3]);
            mixed[1] = (byte)(column[0] ^ mul(0x02, column[1]) ^ mul(0x03, column[2]) ^ column[3]);
            mixed[2] = (byte)(column[0] ^ column[1] ^ mul(0x02, column[2]) ^ mul(0x03, column[3]));
            mixed[3] = (byte)(mul(0x03, column[0]) ^ column[1] ^ column[2] ^ mul(0x02, column[3]));

            System.arraycopy(mixed, 0, state, i, 4);
        }
    }

    private static void invMixColumns(byte[] state) {
        for (int i = 0; i < 16; i += 4) {
            byte[] column = new byte[4];
            System.arraycopy(state, i, column, 0, 4);

            byte[] mixed = new byte[4];
            mixed[0] = (byte)(mul(0x0e, column[0]) ^ mul(0x0b, column[1]) ^ mul(0x0d, column[2]) ^ mul(0x09, column[3]));
            mixed[1] = (byte)(mul(0x09, column[0]) ^ mul(0x0e, column[1]) ^ mul(0x0b, column[2]) ^ mul(0x0d, column[3]));
            mixed[2] = (byte)(mul(0x0d, column[0]) ^ mul(0x09, column[1]) ^ mul(0x0e, column[2]) ^ mul(0x0b, column[3]));
            mixed[3] = (byte)(mul(0x0b, column[0]) ^ mul(0x0d, column[1]) ^ mul(0x09, column[2]) ^ mul(0x0e, column[3]));

            System.arraycopy(mixed, 0, state, i, 4);
        }
    }

    private static void addRoundKey(byte[] state, byte[] roundKey) {
        for (int i = 0; i < 16; i++) {
            state[i] ^= roundKey[i];
        }
    }

    /* ===== Helper Methods ===== */
    private static byte[] padTo16Bytes(String input) {
        byte[] padded = new byte[16];
        byte[] inputBytes = input.getBytes();
        System.arraycopy(inputBytes, 0, padded, 0, Math.min(inputBytes.length, 16));
        return padded;
    }

    private static void printHex(byte[] data) {
        for (byte b : data) {
            System.out.printf("%02X ", b);
        }
        System.out.println();
    }

    // Galois Field multiplication
    private static byte mul(int a, byte b) {
        byte p = 0;
        byte hiBitSet;
        for (int i = 0; i < 8; i++) {
            if ((b & 1) != 0) {
                p ^= a;
            }
            hiBitSet = (byte)(a & 0x80);
            a <<= 1;
            if (hiBitSet != 0) {
                a ^= 0x1b; // x^8 + x^4 + x^3 + x + 1
            }
            b >>= 1;
        }
        return (byte)p;
    }
}